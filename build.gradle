plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'com.github.spotbugs' version '4.6.0'
    id 'org.owasp.dependencycheck' version '6.2.2'
}

group = 'uk.nhs.prm.deductions'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

//Without this task two jars are built, the additional "-plain.jar" is not needed
// for more details refer to: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives
jar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.4'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'com.amazonaws:amazon-sqs-java-messaging-lib:1.0.8'
    implementation platform('software.amazon.awssdk:bom:2.15.0')
    implementation 'software.amazon.awssdk:cloudwatch:2.17.47'
    implementation 'software.amazon.awssdk:sns:2.17.58'
    implementation 'software.amazon.awssdk:sqs:2.17.61'
    implementation 'com.jcabi:jcabi-xml:0.23.1'
    implementation 'com.github.spotbugs:spotbugs-annotations:3.1.3'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-aop'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'org.awaitility:awaitility:3.0.0'
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        if (System.getenv('PIPELINE_INTEGRATION_TEST') != null) {
            java.srcDirs('./src/integrationtest/java')
            resources.srcDirs('./src/integrationtest/resources')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

tasks.withType(Test) {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter tasks.test
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    shouldRunAfter integrationTest
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/model/**')
        }))
    }
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsIntegrationTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/integrationTest/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

dependencyCheck {
    failBuildOnCVSS = 7
    suppressionFile = './dependency-checks-suppression.xml'
}

check.dependsOn integrationTest
